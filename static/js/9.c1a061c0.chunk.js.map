{"version":3,"sources":["Components/LoginPage/Login.module.css","Components/LoginPage/LoginForm.jsx"],"names":["module","exports","MyTextField","label","props","useField","field","meta","className","s","touched","error","connect","state","isLoged","authReducer","setAuthThunk","auth","login","a","provider","firebase","GoogleAuthProvider","signInWithPopup","user","to","header","initialValues","password","rememberMe","validationSchema","Yup","min","max","required","onSubmit","values","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","form","input","name","type","checkbox","button","googleButton","onClick"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,MAAQ,qBAAqB,MAAQ,qBAAqB,OAAS,sBAAsB,aAAe,4BAA4B,OAAS,sBAAsB,SAAW,0B,+KCSlPC,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,2BACnBC,YAASD,GADU,mBAClCE,EADkC,KAC3BC,EAD2B,KAEzC,OACI,sBAAMC,UAAWC,IAAEH,MAAnB,UACI,kCACKH,EAAQ,IACT,iDAAWG,GAAWF,OAEzBG,EAAKG,SAAWH,EAAKI,MAClB,qBAAKH,UAAWC,IAAEE,MAAlB,SAA0BJ,EAAKI,QAC/B,SAwEDC,uBANS,SAACC,GACrB,MAAM,CACFC,QAASD,EAAME,YAAYD,WAIK,CAACE,kBAA1BJ,EAjEG,SAAC,GAAmC,IAAlCK,EAAiC,EAAjCA,KAAMD,EAA2B,EAA3BA,aAAcF,EAAa,EAAbA,QAG9BI,EAAK,uCAAG,gCAAAC,EAAA,6DACJC,EAAW,IAAIC,IAASJ,KAAKK,mBADzB,SAEWL,EAAKM,gBAAgBH,GAFhC,gBAEHI,EAFG,EAEHA,KACPR,EAAaQ,GAHH,2CAAH,qDAOX,OAAGV,EACQ,cAAC,IAAD,CAAUW,GAAG,MAGjB,qCAGH,oBAAIjB,UAAWC,IAAEiB,OAAjB,qBAEA,cAAC,IAAD,CACIC,cAAe,CACXT,MAAO,GACPU,SAAU,GACVC,YAAY,GAEhBC,iBAAkBC,IAAW,CACzBb,MAAOa,MACFC,IAAI,EAAG,kCACPC,IAAI,GAAI,sCACRC,SAAS,YACdN,SAAUG,MACLC,IAAI,EAAG,kCACPC,IAAI,GAAI,sCACRC,SAAS,YACdL,WAAYE,QAEhBI,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAChCC,YAAW,WACPC,MAAM,GAAD,OAAIC,KAAKC,UAAUN,EAAQ,KAAM,GAAjC,iGAELE,IACAD,GAAc,KACf,MAvBX,SA2BI,eAAC,IAAD,CAAM7B,UAAWC,IAAEkC,KAAnB,UACI,cAACzC,EAAD,CAAaM,UAAWC,IAAEmC,MAAOC,KAAK,QAAQC,KAAK,OAAO3C,MAAM,UAChE,cAACD,EAAD,CAAaM,UAAWC,IAAEmC,MAAOC,KAAK,WAAWC,KAAK,WAAW3C,MAAM,aACvE,cAACD,EAAD,CAAaM,UAAWC,IAAEsC,SAAUF,KAAK,aAAaC,KAAK,WAAW3C,MAAM,gBAC5E,wBAAQK,UAAWC,IAAEuC,OAAQF,KAAK,SAAlC,oBACA,wBAAQtC,UAAWC,IAAEuC,OAAS,IAAMvC,IAAEwC,aAAcC,QAAShC,EAAO4B,KAAK,SAAzE","file":"static/js/9.c1a061c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__1WxPm\",\"field\":\"Login_field__2e7o_\",\"input\":\"Login_input__1iBNt\",\"error\":\"Login_error__1CAws\",\"button\":\"Login_button__1EOkw\",\"googleButton\":\"Login_googleButton__1vrMl\",\"header\":\"Login_header__2tqZP\",\"checkbox\":\"Login_checkbox__15XUU\"};","import React from 'react'\r\nimport { Formik, Form, useField } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport s from './Login.module.css'\r\nimport firebase from 'firebase'\r\nimport {connect} from 'react-redux'\r\nimport {setAuthThunk} from '../../Redux/authReducer'\r\nimport { Redirect } from 'react-router';\r\n\r\n\r\nconst MyTextField = ({ label, ...props }) => {\r\n    const [field, meta] = useField(props);\r\n    return (\r\n        <div  className={s.field}>\r\n            <label>\r\n                {label + ' '}\r\n                <input {...field} {...props} />\r\n            </label>\r\n            {meta.touched && meta.error ? (\r\n                <div className={s.error}>{meta.error}</div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst LoginForm = ({auth, setAuthThunk, isLoged}) => {\r\n\r\n\r\n    const login = async () => {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        const {user} = await auth.signInWithPopup(provider);\r\n        setAuthThunk(user);\r\n    }\r\n\r\n\r\n    if(isLoged){\r\n        return <Redirect to=\"/\"/>\r\n     } \r\n\r\n    return <>\r\n\r\n\r\n        <h1 className={s.header}>Sign Up</h1>\r\n\r\n        <Formik\r\n            initialValues={{\r\n                login: \"\",\r\n                password: \"\",\r\n                rememberMe: false\r\n            }}\r\n            validationSchema={Yup.object({\r\n                login: Yup.string()\r\n                    .min(5, '5 or more symbols are required')\r\n                    .max(20, 'fewer than 20 symbols are required')\r\n                    .required('Required'),\r\n                password: Yup.string()\r\n                    .min(5, '5 or more symbols are required')\r\n                    .max(15, 'fewer than 15 symbols are required')\r\n                    .required('Required'),\r\n                rememberMe: Yup.boolean()\r\n            })}\r\n            onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                setTimeout(() => {\r\n                    alert(`${JSON.stringify(values, null, 2)} \r\nDear user, at present moment the only possible way to log in is authorisation with Google`);\r\n                    resetForm();\r\n                    setSubmitting(false)\r\n                }, 2000)\r\n            }}\r\n        >\r\n\r\n            <Form className={s.form}>\r\n                <MyTextField className={s.input} name=\"login\" type=\"text\" label=\"Login\" />\r\n                <MyTextField className={s.input} name=\"password\" type=\"password\" label=\"Password\" />\r\n                <MyTextField className={s.checkbox} name=\"rememberMe\" type=\"checkbox\" label=\"remember me\" />\r\n                <button className={s.button} type=\"submit\">Submit</button>\r\n                <button className={s.button + ' ' + s.googleButton} onClick={login} type=\"button\">Enter with Google </button>\r\n            </Form>\r\n\r\n\r\n        </Formik>\r\n    </>\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        isLoged: state.authReducer.isLoged\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {setAuthThunk})(LoginForm);\r\n\r\n\r\n"],"sourceRoot":""}